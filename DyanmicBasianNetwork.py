# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YqxYPwBVv1VXmJryqX2szlhuNLDm5bSf
"""

!pip install pgmpy

import pandas as pd
from pgmpy.models import DynamicBayesianNetwork as DBN
from pgmpy.factors.discrete import TabularCPD
from pgmpy.inference import DBNInference

# Define DBN structure
dbn = DBN()

# Add intra-slice edges (same time step)
dbn.add_edges_from([(('Flu', 0), ('Fever', 0)), (('Flu', 0), ('Cough', 0))])

# Add inter-slice edges (across time)
dbn.add_edges_from([(('Flu', 0), ('Flu', 1))])

# Define CPDs

# Initial state P(Flu_0)
cpd_flu_0 = TabularCPD(variable=('Flu', 0), variable_card=2, values=[[0.8], [0.2]])

# Transition model P(Flu_t | Flu_t-1)
cpd_flu_t = TabularCPD(variable=('Flu', 1), variable_card=2,
                        values=[[0.9, 0.4],  # P(Flu_t=0 | Flu_t-1=0), P(Flu_t=0 | Flu_t-1=1)
                                [0.1, 0.6]],  # P(Flu_t=1 | Flu_t-1=0), P(Flu_t=1 | Flu_t-1=1)
                        evidence=[('Flu', 0)], evidence_card=[2])

# P(Fever | Flu)
cpd_fever = TabularCPD(variable=('Fever', 0), variable_card=2,
                       values=[[0.7, 0.1], [0.3, 0.9]],
                       evidence=[('Flu', 0)], evidence_card=[2])

# P(Cough | Flu)
cpd_cough = TabularCPD(variable=('Cough', 0), variable_card=2,
                       values=[[0.6, 0.2], [0.4, 0.8]],
                       evidence=[('Flu', 0)], evidence_card=[2])

# Add CPDs to the model
dbn.add_cpds(cpd_flu_0, cpd_fever, cpd_cough, cpd_flu_t)

# Initialize state to prevent duplicate CPDs
dbn.initialize_initial_state()

# Check model
assert dbn.check_model()

# Perform inference
inference = DBNInference(dbn)

# Query: Probability of Flu at time t=1 given Fever=1 at time t=0
result = inference.query(variables=[('Flu', 1)], evidence={('Fever', 0): 1})
print(result)
for cpd in dbn.get_cpds():
    print(cpd)

import pandas as pd
from pgmpy.models import DynamicBayesianNetwork as DBN
from pgmpy.factors.discrete import TabularCPD
from pgmpy.inference import DBNInference

# Step 1: Create the DBN
dbn = DBN()

# Step 2: Define the structure (within time slice & temporal edges)
dbn.add_edges_from([
    (('Flu', 0), ('Fever', 0)),
    (('Flu', 0), ('Cough', 0)),
    (('Flu', 0), ('Flu', 1)),  # Temporal edge
])

# Step 3: Define CPDs for time=0 (Initial state)
cpd_flu_0 = TabularCPD(variable=('Flu', 0), variable_card=2, values=[[0.8], [0.2]])

cpd_fever_0 = TabularCPD(variable=('Fever', 0), variable_card=2,
                         values=[[0.7, 0.1], [0.3, 0.9]],
                         evidence=[('Flu', 0)], evidence_card=[2])

cpd_cough_0 = TabularCPD(variable=('Cough', 0), variable_card=2,
                         values=[[0.6, 0.2], [0.4, 0.8]],
                         evidence=[('Flu', 0)], evidence_card=[2])

# Step 4: Define transition CPDs (time t -> t+1)
cpd_flu_t = TabularCPD(variable=('Flu', 1), variable_card=2,
                        values=[[0.9, 0.4],  # P(Flu=0 | Flu_prev=0), P(Flu=0 | Flu_prev=1)
                                [0.1, 0.6]],  # P(Flu=1 | Flu_prev=0), P(Flu=1 | Flu_prev=1)
                        evidence=[('Flu', 0)], evidence_card=[2])

# Step 5: Add CPDs for t=0 (DBN auto-generates for t>0)
dbn.add_cpds(cpd_flu_0, cpd_fever_0, cpd_cough_0, cpd_flu_t)

# üîç Debug: Print before initialization
print("\nBefore initialization:")
for cpd in dbn.get_cpds():
    print(cpd)

# Step 6: Initialize DBN (Now it should auto-generate future CPDs correctly)
dbn.initialize_initial_state()
print("\n--- DEBUG: Printing Factor Tables ---")
for cpd in dbn.get_cpds():
    print(cpd)


# üîç Debug: Print after initialization
print("\nAfter initialization:")
for cpd in dbn.get_cpds():
    print(cpd)

# Step 7: Validate the model
assert dbn.check_model()

# Step 8: Perform inference
inference = DBNInference(dbn)
result = inference.query(variables=[('Flu', 1)], evidence={('Flu', 0): 1})

# Print the results
print("\nFlu Probabilities at Time 1:", result[('Flu', 1)].values)
print("\n--- DEBUG: Inference Calculation ---")
result = inference.query(variables=[('Flu', 1)], evidence={('Flu', 0): 1}, )
print(result)

